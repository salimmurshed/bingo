import 'package:bingo_wholesale/data_models/models/country_list_model/country_list_model.dart';import 'package:bingo_wholesale/data_models/models/store_model/store_model.dart';import 'package:bingo_wholesale/services/network/network_urls.dart';import 'package:dartz/dartz.dart';import 'dart:convert' as convert;import '../app/locator.dart';import '../data_models/enums/data_source.dart';import '../data_models/models/failure.dart';import '../data_models/models/user_model/user_model.dart';import '../services/network/network_info.dart';import 'package:http/http.dart' as http;import '../services/storage/db.dart';import '../services/storage/deviceStorage.dart';class RepositoryImpl {  final http.Client _client = http.Client();  var networkInfo = locator<NetworkInfoService>();  DeviceStorage _storage = locator<DeviceStorage>();  // String get header => "bearer ${_storage.getString(DataBase.userToken)}";  // Future<Map<String, String>> getHeader() async {  //   String token = "bearer ${_storage.getString(DataBase.userToken)}";  //   Map<String, String> header = {'Authorization': token};  //   return header;  // }  Map<String, String> get headers => {        "Content-Type": "application/json",        "Accept": "application/json",        "Authorization": "Bearer ${_storage.getString(DataBase.userToken)}",      };  Future<Either<Failure, UserModel>> login(      String email, String password) async {    Uri url = Uri.parse(NetworkUrls.loginUrl);    final _response = await _client.post(url, body: {      'email': 'anacaona@mailinator.com',      'password': '12345678',      'device_type': 'android',      'device_token': 'dfreyh',      'latitude': '1234',      'longitude': '1234'    });    if (await networkInfo.isConnected) {      try {        final responseData =            UserModel.fromJson(convert.jsonDecode(_response.body));        _storage.setString(DataBase.userData, _response.body);        if (responseData.success!) {          return Right(responseData);        } else {          return Left(Failure(              _response.statusCode,              responseData.message ?? ResponseMessage.DEFAULT,              responseData.success!));        }      } catch (e) {        return Left(AppExceptions.handle(e).failure);      }    } else {      // _navigationService.displayDialog(Text("else"));      return Left(DataSource.NO_INTERNET_CONNECTION.getFailure());    }  }//get all countries  Future<Either<Failure, CountryListModel>> getCountries() async {    if (await networkInfo.isConnected) {      try {        Uri url1 = Uri.parse(NetworkUrls.countryUrl);        final _response = await _client.post(url1);        final responseData =            CountryListModel.fromJson(convert.jsonDecode(_response.body));        if (responseData.success!) // success        {          return Right(responseData);        } else {          return Left(Failure(              _response.statusCode,              responseData.message ?? ResponseMessage.DEFAULT,              responseData.success!));        }      } catch (e) {        return Left(AppExceptions.handle(e).failure);      }    } else {      return Left(DataSource.NO_INTERNET_CONNECTION.getFailure());    }  }  //all store  Future<Either<Failure, StoreModel>> getStores() async {    // var header = await getHeader();    if (await networkInfo.isConnected) {      try {        Uri url1 = Uri.parse(NetworkUrls.storeUrl);        print(url1);        print(headers);        final response = await _client.get(url1, headers: headers);        print(response);        final responseData =            StoreModel.fromJson(convert.jsonDecode(response.body));        print('responseData');        print(responseData.message);        if (responseData.success!) // success        {          return Right(responseData);        } else {          return Left(Failure(              response.statusCode,              responseData.message ?? ResponseMessage.DEFAULT,              responseData.success!));        }      } catch (e) {        return Left(AppExceptions.handle(e).failure);      }    } else {      return Left(DataSource.NO_INTERNET_CONNECTION.getFailure());    }  }}