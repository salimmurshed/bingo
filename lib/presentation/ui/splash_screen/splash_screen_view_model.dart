import 'package:bingo_wholesale/repository/repository_components.dart';import 'package:flutter/scheduler.dart';import 'package:stacked/stacked.dart';import '../../../app/locator.dart';import '../../../app/router.dart';import '../../../services/auth_service/auth_service.dart';import '../../../services/navigation/navigationService.dart';import '../../../services/storage/db.dart';import '../../../services/storage/deviceStorage.dart';class SplashScreenViewModel extends ReactiveViewModel {  ZDeviceStorage _storage = locator<ZDeviceStorage>();  NavigationService _navigationService = locator<NavigationService>();  final AuthService _authService = locator<AuthService>();  final RepositoryComponents _repositoryComponents =      locator<RepositoryComponents>();  SplashScreenViewModel() {    SchedulerBinding.instance.addPostFrameCallback((_) {      alreadyLogIn();    });    print(_storage.getString(DataBase.userData));    // _storage.clearData();    if (_storage.getString(DataBase.userData).isNotEmpty) {      _repositoryComponents.getComponentsReady();    }  }  Future<void> alreadyLogIn() async {    await Future.delayed(Duration(seconds: 2));    if (_storage.getString(DataBase.userToken).isNotEmpty) {      _authService.getLoggedUserDetails();      print(_storage.getString(DataBase.userToken));      _navigationService.pushReplacementNamed(Routes.dashboardScreen);    } else {      _navigationService.pushReplacementNamed(Routes.login);    }  }  @override  List<ReactiveServiceMixin> get reactiveServices => [_authService];}