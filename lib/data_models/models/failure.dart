import 'dart:io';import 'package:bingo_wholesale/const/allConst.dart';import '../enums/data_source.dart';class Failure {  int code; // 200 or 400  bool status; // 200 or 400  String message; // error or success  Failure(this.code, this.message, this.status);}class ResponseCode {  // API status codes  static const int SUCCESS = 200; // success with data  static const int NO_CONTENT = 201; // success with no content  static const int BAD_REQUEST = 400; // failure, api rejected the request  static const int FORBIDDEN = 403; // failure, api rejected the request  static const int UNAUTHORISED = 401; // failure user is not authorised  static const int NOT_FOUND =      404; // failure, api url is not correct and not found  static const int INTERNAL_SERVER_ERROR =      500; // failure, crash happened in server side  // local status code  static const int DEFAULT = -1;  static const int CONNECT_TIMEOUT = -2;  static const int CANCEL = -3;  static const int RECEIVE_TIMEOUT = -4;  static const int SEND_TIMEOUT = -5;  static const int CACHE_ERROR = -6;  static const int NO_INTERNET_CONNECTION = -7;}class ResponseMessage {  // API status codes  // API response codes  static const String SUCCESS = AppString.success; // success with data  static const String NO_CONTENT =      AppString.noContent; // success with no content  static const String BAD_REQUEST =      AppString.badRequestError; // failure, api rejected our request  static const String FORBIDDEN =      AppString.forbiddenError; // failure,  api rejected our request  static const String UNAUTHORISED =      AppString.unauthorizedError; // failure, user is not authorised  static const String NOT_FOUND = AppString      .notFoundError; // failure, API url is not correct and not found in api side.  static const String INTERNAL_SERVER_ERROR =      AppString.internalServerError; // failure, a crash happened in API side.  // local responses codes  static const String DEFAULT =      AppString.defaultError; // unknown error happened  static const String CONNECT_TIMEOUT =      AppString.timeoutError; // issue in connectivity  static const String CANCEL =      AppString.defaultError; // API request was cancelled  static const String RECEIVE_TIMEOUT =      AppString.timeoutError; //  issue in connectivity  static const String SEND_TIMEOUT =      AppString.timeoutError; //  issue in connectivity  static const String CACHE_ERROR = AppString      .defaultError; //  issue in getting data from local data source (cache)  static const String NO_INTERNET_CONNECTION =      AppString.noInternetError; // issue in connectivity}extension DataSourceExtension on DataSource {  Failure getFailure() {    switch (this) {      case DataSource.BAD_REQUEST:        return Failure(ResponseCode.BAD_REQUEST,            ResponseMessage.BAD_REQUEST.trim(), false);      case DataSource.FORBIDDEN:        return Failure(            ResponseCode.FORBIDDEN, ResponseMessage.FORBIDDEN.trim(), false);      case DataSource.UNAUTHORISED:        return Failure(ResponseCode.UNAUTHORISED,            ResponseMessage.UNAUTHORISED.trim(), false);      case DataSource.NOT_FOUND:        return Failure(            ResponseCode.NOT_FOUND, ResponseMessage.NOT_FOUND.trim(), false);      case DataSource.INTERNAL_SERVER_ERROR:        return Failure(ResponseCode.INTERNAL_SERVER_ERROR,            ResponseMessage.INTERNAL_SERVER_ERROR.trim(), false);      case DataSource.CONNECT_TIMEOUT:        return Failure(ResponseCode.CONNECT_TIMEOUT,            ResponseMessage.CONNECT_TIMEOUT.trim(), false);      case DataSource.CANCEL:        return Failure(            ResponseCode.CANCEL, ResponseMessage.CANCEL.trim(), false);      case DataSource.RECEIVE_TIMEOUT:        return Failure(ResponseCode.RECEIVE_TIMEOUT,            ResponseMessage.RECEIVE_TIMEOUT.trim(), false);      case DataSource.SEND_TIMEOUT:        return Failure(ResponseCode.SEND_TIMEOUT,            ResponseMessage.SEND_TIMEOUT.trim(), false);      case DataSource.CACHE_ERROR:        return Failure(ResponseCode.CACHE_ERROR,            ResponseMessage.CACHE_ERROR.trim(), false);      case DataSource.NO_INTERNET_CONNECTION:        return Failure(ResponseCode.NO_INTERNET_CONNECTION,            ResponseMessage.NO_INTERNET_CONNECTION.trim(), false);      case DataSource.DEFAULT:        return Failure(ResponseCode.DEFAULT, ResponseMessage.DEFAULT, false);      default:        return Failure(ResponseCode.DEFAULT, ResponseMessage.DEFAULT, false);    }  }}class AppExceptions implements Exception {  late Failure failure;  AppExceptions.handle(dynamic error) {    if (error is HttpResponse) {      failure = _handleException(error);    } else {      failure = DataSource.DEFAULT.getFailure();    }  }  Failure _handleException(HttpResponse error) {    switch (error.statusCode) {      case ResponseCode.CONNECT_TIMEOUT:        return DataSource.CONNECT_TIMEOUT.getFailure();      case ResponseCode.SEND_TIMEOUT:        return DataSource.SEND_TIMEOUT.getFailure();      case ResponseCode.RECEIVE_TIMEOUT:        return DataSource.RECEIVE_TIMEOUT.getFailure();      case ResponseCode.BAD_REQUEST:        return DataSource.BAD_REQUEST.getFailure();      case ResponseCode.FORBIDDEN:        return DataSource.FORBIDDEN.getFailure();      case ResponseCode.UNAUTHORISED:        return DataSource.UNAUTHORISED.getFailure();      case ResponseCode.NOT_FOUND:        return DataSource.NOT_FOUND.getFailure();      case ResponseCode.INTERNAL_SERVER_ERROR:        return DataSource.INTERNAL_SERVER_ERROR.getFailure();      case ResponseCode.CANCEL:        return DataSource.CANCEL.getFailure();      default:        return DataSource.DEFAULT.getFailure();    }  }}