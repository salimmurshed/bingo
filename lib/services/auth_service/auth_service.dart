import 'package:dartz/dartz.dart';import 'package:injectable/injectable.dart';import 'package:stacked/stacked.dart';import 'dart:convert' as convert;import 'package:http/http.dart' as http;import '../../app/locator.dart';import '../../app/router.dart';import '../../const/database_helper.dart';import '../../data/repository_impl.dart';import '../../data_models/models/failure.dart';import '../../data_models/models/user_model/user_model.dart';import '../../presentation/widgets/alert/error_alert.dart';import '../navigation/navigationService.dart';import '../storage/db.dart';import '../storage/deviceStorage.dart';@lazySingletonclass AuthService with ReactiveServiceMixin {  RepositoryImpl repositoryImpl = RepositoryImpl();  DeviceStorage _storage = locator<DeviceStorage>();  NavigationService _navigationService = locator<NavigationService>();  final dbHelper = DatabaseHelper.instance;  ReactiveValue<UserModel> user = ReactiveValue(UserModel());  ReactiveValue<bool> isRetailer = ReactiveValue(false);  AuthService() {    listenToReactiveValues([user, isRetailer]);  }  void getLoggedUserDetails() {    user.value = UserModel.fromJson(        convert.jsonDecode(_storage.getString(DataBase.userData)));    isRetailer.value = _storage.getString(DataBase.userType).toLowerCase() ==            "Retailer".toLowerCase()        ? true        : false;    notifyListeners();  }  Future<void> login(String email, String password) async {    Either<Failure, UserModel> resultOrExeption =        await repositoryImpl.login(email, password);    resultOrExeption.fold(        (error) => _navigationService.displayDialog(              ErrorAlert(error),            ), (result) {      user.value = result;      _storage.setString(DataBase.userToken, user.value.data!.token);      print(_storage.getString(DataBase.userType));      isRetailer.value = _storage.getString(DataBase.userType).toLowerCase() ==              "Retailer".toLowerCase()          ? true          : false;      _storage.setString(DataBase.userType, user.value.data!.enrollmentType);      _navigationService.pushNamed(Routes.dashboardScreen);      notifyListeners();    });  }}