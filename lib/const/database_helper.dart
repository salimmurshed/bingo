import 'dart:io';import 'package:bingo_wholesale/services/local_data/table_names.dart';import 'package:path/path.dart';import 'package:sqflite/sqflite.dart';import 'package:path_provider/path_provider.dart';class DatabaseHelper {  final _databaseName = "bingo_database_3.db";  final _databaseVersion = 4;  static String id = "id";  static String country = 'country';  static String timezone = 'timezone';  static String glId = "gl_id";  static String status = "status";  static String date = "date";  static String currency = 'currency';  static String branchLegal = 'branch_legal';  static String address = 'address';  static String taxid = 'taxid';  static String taxIdType = 'tax_id_type';  static String countryCode = 'country_code';  static String language = 'language';  static String uniqueId = 'unique_id';  static String name = 'name';  static String city = 'city';  // static String address = 'address';  static String remarks = 'remarks';  // static String status = 'status';  DatabaseHelper._privateConstructor();  static final DatabaseHelper instance = DatabaseHelper._privateConstructor();  static Database? _database;  Future<Database> get database async {    if (_database != null) return _database!;    _database = await initDatabase();    return _database!;  }  initDatabase() async {    Directory documentsDirectory = await getApplicationDocumentsDirectory();    String path = join(documentsDirectory.path, _databaseName);    return await openDatabase(path,        version: _databaseVersion, onCreate: _onCreate);  }  Future _onCreate(Database db, int version) async {    await db.execute("CREATE TABLE ${TableNames.countryTableName} ("        "$id INTEGER PRIMARY KEY,"        "$country TEXT NOT NULL,"        "$timezone TEXT NOT NULL,"        "$glId INTEGER NOT NULL,"        "$status TEXT NOT NULL,"        "$date TEXT NOT NULL,"        "$currency TEXT NOT NULL,"        "$branchLegal TEXT NOT NULL,"        "$address TEXT NOT NULL,"        "$taxid TEXT NOT NULL,"        "$taxIdType TEXT NOT NULL,"        "$countryCode TEXT NOT NULL,"        "$language TEXT NOT NULL"        ")");    await db.execute("CREATE TABLE ${TableNames.storeTableName}("        "$id INTEGER PRIMARY KEY,"        "$uniqueId TEXT NOT NULL,"        "$name TEXT NOT NULL,"        "$city TEXT NOT NULL,"        "$address INTEGER NOT NULL,"        "$remarks TEXT NOT NULL,"        "$status TEXT NOT NULL"        ")");  }  Future<int> insert(tableName, row) async {    Database db = await instance.database;    return await db.insert(tableName, row,        conflictAlgorithm: ConflictAlgorithm.ignore);  }  // void deleteDB() async {  //   Database db = await instance.database;  //   await db.delete(countries);  // }  Future<List<Map<String, dynamic>>> queryAllRows(tblName) async {    print('tblName');    print(tblName);    Database db = await instance.database;    return await db.query(tblName);  }  // Future<int?> queryRowCount() async {  //   Database db = await instance.database;  //   return Sqflite.firstIntValue(  //       await db.rawQuery('SELECT COUNT(*) FROM $countries'));  // }  // Future<int> update(Map<String, dynamic> row) async {  //   Database db = await instance.database;  //   int id = row['id'];  //   return await db.update(countries, row, where: '$id = ?', whereArgs: [id]);  // }  //  // Future<int> delete(int id) async {  //   Database db = await instance.database;  //   return await db.delete(countries, where: '$id = ?', whereArgs: [id]);  // }}