import 'package:bingo_wholesale/data_models/models/store_model/store_model.dart';import 'package:bingo_wholesale/services/network/network_urls.dart';import 'package:http/http.dart';import 'package:injectable/injectable.dart';import 'package:stacked/stacked.dart';import 'dart:convert' as convert;import '../../app/locator.dart';import '../const/database_helper.dart';import '../../services/network/network_info.dart';import '../data_models/models/association_request_model/association_request_model.dart';import '../data_models/models/wholesaler_list_model/wholesaler_list_model.dart';import '../presentation/widgets/alert/alert_dialog.dart';import '../services/local_data/local_data.dart';import '../services/local_data/table_names.dart';import '../services/navigation/navigationService.dart';import '../services/network/web_service.dart';@lazySingletonclass RepositoryRetailer with ReactiveServiceMixin {  final dbHelper = DatabaseHelper.instance;  var networkInfo = locator<NetworkInfoService>();  final WebService _webService = locator<WebService>();  final NavigationService _navigationService = locator<NavigationService>();  final LocalData _localData = locator<LocalData>();  RepositoryRetailer() {    listenToReactiveValues([]);  }  List<StoreData> storeList = [];  List<WholeSalerOrFiaListData> wholeSaleList = [];  List<WholeSalerOrFiaListData> fiaList = [];  List<AssociationRequestData> associationRequestData = [];  //all store  void getStores() async {    dbHelper.queryAllRows(TableNames.storeTableName).then((value) {      storeList = value.map((d) => StoreData.fromJson(d)).toList();    });    try {      Response response = await _webService.getRequest(NetworkUrls.storeUrl);      final responseData =          StoreModel.fromJson(convert.jsonDecode(response.body));      storeList = responseData.data!;      _localData.insert(TableNames.storeTableName, responseData.data!);    } on Exception catch (e) {      _navigationService.displayDialog(AlertDialogMessage(e.toString()));    }    notifyListeners();  }  //all wholesaler list  void getWholesaler() async {    dbHelper.queryAllRows(TableNames.wholesalerList).then((value) {      wholeSaleList =          value.map((d) => WholeSalerOrFiaListData.fromJson(d)).toList();      print(value.map((d) => WholeSalerOrFiaListData.fromJson(d)).toList());    });    try {      Response response =          await _webService.getRequest(NetworkUrls.wholesalerListUri);      final responseData =          WholeSalerOrFiaListModel.fromJson(convert.jsonDecode(response.body));      wholeSaleList = responseData.data!;      _localData.insert(TableNames.wholesalerList, responseData.data!);    } on Exception catch (e) {      _navigationService.displayDialog(AlertDialogMessage(e.toString()));    }    notifyListeners();  }  void sendWholesalerRequest(List<String> selectedWholeSaler) {    String value =        selectedWholeSaler.toString().replaceAll('[', "").replaceAll(']', "");    var jsonBody = {"unique_id": value};    _webService.postRequest(jsonBody, NetworkUrls.requestWholesaler);  }  //all fia list  void getFia() async {    dbHelper.queryAllRows(TableNames.fiaList).then((value) {      fiaList = value.map((d) => WholeSalerOrFiaListData.fromJson(d)).toList();    });    try {      Response response = await _webService.getRequest(NetworkUrls.fiaListURI);      final responseData =          WholeSalerOrFiaListModel.fromJson(convert.jsonDecode(response.body));      fiaList = responseData.data!;      _localData.insert(TableNames.fiaList, responseData.data!);    } on Exception catch (e) {      _navigationService.displayDialog(AlertDialogMessage(e.toString()));    }    notifyListeners();  }  void sendFiaRequest(List<String> selectedFia) {    String value =        selectedFia.toString().replaceAll('[', "").replaceAll(']', "");    var jsonBody = {"unique_id": value};    _webService.postRequest(jsonBody, NetworkUrls.requestFia);  }  //all Wholesaler Association list  void getRetailersAssociationData() async {    dbHelper.queryAllRows(TableNames.retailerAssociationList).then((value) {      associationRequestData =          value.map((d) => AssociationRequestData.fromJson(d)).toList();      print(associationRequestData);    });    try {      Response response =          await _webService.getRequest(NetworkUrls.requestAssociationList);      final responseData =          AssociationRequestModel.fromJson(convert.jsonDecode(response.body));      associationRequestData = responseData.data!;      _localData.insert(TableNames.retailerAssociationList, responseData.data!);    } on Exception catch (e) {      _navigationService.displayDialog(AlertDialogMessage(e.toString()));    }    notifyListeners();  }}