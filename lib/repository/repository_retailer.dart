import 'package:bingo_wholesale/const/app_extensions/widgets_extensions.dart';import 'package:bingo_wholesale/const/app_strings.dart';import 'package:bingo_wholesale/data_models/models/store_model/store_model.dart';import 'package:bingo_wholesale/services/network/network_urls.dart';import 'package:flutter/foundation.dart';import 'package:http/http.dart';import 'package:injectable/injectable.dart';import 'package:stacked/stacked.dart';import 'dart:convert' as convert;import '../../app/locator.dart';import '../const/database_helper.dart';import '../../services/network/network_info.dart';import '../data_models/enums/status_name.dart';import '../data_models/models/association_request_model/association_request_model.dart';import '../data_models/models/retailer_wholesaler_association_request_model/retailer_wholesaler_association_request_model.dart';import '../data_models/models/update_response_model/update_response_model.dart';import '../data_models/models/wholesaler_list_model/wholesaler_list_model.dart';import '../presentation/widgets/alert/alert_dialog.dart';import '../services/local_data/local_data.dart';import '../services/local_data/table_names.dart';import '../services/navigation/navigationService.dart';import '../services/network/web_service.dart';@lazySingletonclass RepositoryRetailer with ReactiveServiceMixin {  final dbHelper = DatabaseHelper.instance;  var networkInfo = locator<NetworkInfoService>();  final WebService _webService = locator<WebService>();  final NavigationService _navigationService = locator<NavigationService>();  final LocalData _localData = locator<LocalData>();  RepositoryRetailer() {    listenToReactiveValues([      retailerAssociationRequestDetailsList,      associationRequestRetailerDetails,      setScreenBusy,      associationRequestData    ]);  }  List<StoreData> storeList = [];  List<WholeSalerOrFiaListData> wholeSaleList = [];  List<WholeSalerOrFiaListData> fiaList = [];  ReactiveValue<List<AssociationRequestData>> associationRequestData =      ReactiveValue([]);  ReactiveValue<RetailerAssociationRequestDetailsModel>      associationRequestRetailerDetails =      ReactiveValue(RetailerAssociationRequestDetailsModel());  ReactiveValue<List<RetailerAssociationRequestDetailsModel>>      retailerAssociationRequestDetailsList =      ReactiveValue<List<RetailerAssociationRequestDetailsModel>>([]);  ReactiveValue<bool> setScreenBusy = ReactiveValue(false);  //all store  void getStores() async {    dbHelper.queryAllRows(TableNames.storeTableName).then((value) {      storeList = value.map((d) => StoreData.fromJson(d)).toList();    });    try {      Response response = await _webService.getRequest(NetworkUrls.storeUrl);      final responseData =          StoreModel.fromJson(convert.jsonDecode(response.body));      storeList = responseData.data!;      _localData.insert(TableNames.storeTableName, responseData.data!);    } on Exception catch (e) {      _navigationService.displayDialog(AlertDialogMessage(e.toString()));    }    notifyListeners();  }  //all wholesaler list  void getWholesaler() async {    dbHelper.queryAllRows(TableNames.wholesalerList).then((value) {      wholeSaleList =          value.map((d) => WholeSalerOrFiaListData.fromJson(d)).toList();    });    try {      Response response =          await _webService.getRequest(NetworkUrls.wholesalerListUri);      final responseData =          WholeSalerOrFiaListModel.fromJson(convert.jsonDecode(response.body));      wholeSaleList = responseData.data!;      _localData.insert(TableNames.wholesalerList, responseData.data!);    } on Exception catch (e) {      _navigationService.displayDialog(AlertDialogMessage(e.toString()));    }    notifyListeners();  }  void sendWholesalerRequest(List<String> selectedWholeSaler) {    String value =        selectedWholeSaler.toString().replaceAll('[', "").replaceAll(']', "");    var jsonBody = {"unique_id": value};    _webService.postRequest(jsonBody, NetworkUrls.requestWholesaler);  }  //all fia list  void getFia() async {    dbHelper.queryAllRows(TableNames.fiaList).then((value) {      fiaList = value.map((d) => WholeSalerOrFiaListData.fromJson(d)).toList();    });    try {      Response response = await _webService.getRequest(NetworkUrls.fiaListURI);      final responseData =          WholeSalerOrFiaListModel.fromJson(convert.jsonDecode(response.body));      fiaList = responseData.data!;      _localData.insert(TableNames.fiaList, responseData.data!);    } on Exception catch (e) {      _navigationService.displayDialog(AlertDialogMessage(e.toString()));    }    notifyListeners();  }  void sendFiaRequest(List<String> selectedFia) {    String value =        selectedFia.toString().replaceAll('[', "").replaceAll(']', "");    var jsonBody = {"unique_id": value};    _webService.postRequest(jsonBody, NetworkUrls.requestFia);  }  //all Wholesaler Association list  void getRetailersAssociationData() async {    dbHelper.queryAllRows(TableNames.retailerAssociationList).then((value) {      associationRequestData.value =          value.map((d) => AssociationRequestData.fromJson(d)).toList();    });    try {      Response response =          await _webService.getRequest(NetworkUrls.requestAssociationList);      final responseData =          AssociationRequestModel.fromJson(convert.jsonDecode(response.body));      associationRequestData.value = responseData.data!;      _localData.insert(TableNames.retailerAssociationList, responseData.data!);    } on Exception catch (e) {      _navigationService.displayDialog(AlertDialogMessage(e.toString()));    }    notifyListeners();  }  Future<void> getRetailerAssociationDetails(String id) async {    int index = 0;    bool isAvailable = false;    if (retailerAssociationRequestDetailsList.value.isNotEmpty) {      index = retailerAssociationRequestDetailsList.value.indexWhere(          (element) => element.data![0].companyInformation![0].uniqueId == id);    }    if (retailerAssociationRequestDetailsList.value.isNotEmpty) {      isAvailable = retailerAssociationRequestDetailsList.value          .where((element) =>              element.data![0].companyInformation![0].uniqueId == id)          .isNotEmpty;    }    if (isAvailable) {      associationRequestRetailerDetails.value =          retailerAssociationRequestDetailsList.value[index];    } else {      try {        setScreenBusy.value = true;        notifyListeners();        var jsonBody = {"unique_id": id};        Response response = await _webService.postRequest(            jsonBody, NetworkUrls.viewRetailerWholesalerAssociationRequest);        print(response.body);        RetailerAssociationRequestDetailsModel responseData =            RetailerAssociationRequestDetailsModel.fromJson(                convert.jsonDecode(response.body));        retailerAssociationRequestDetailsList.value.add(responseData);        associationRequestRetailerDetails.value = responseData;        setScreenBusy.value = false;        notifyListeners();      } on Exception catch (e) {        setScreenBusy.value = false;        notifyListeners();      }    }    notifyListeners();  }  Future<UpdateResponseModel> updateRetailerWholesalerAssociationStatus(      dynamic data, String uniqueId, int statusID) async {    int index = retailerAssociationRequestDetailsList.value.indexWhere(        (element) =>            element.data![0].companyInformation![0].uniqueId == uniqueId);    notifyListeners();    try {      Response response = await _webService.postRequest(          data, NetworkUrls.updateRetailerWholesalerAssociationStatus);      final responseData =          UpdateResponseModel.fromJson(convert.jsonDecode(response.body));      if (responseData.success!) {        retailerAssociationRequestDetailsList            .value[index]            .data![0]            .companyInformation![0]            .status = describeEnum(StatusNames.completed).toUpperCamelCase();        associationRequestRetailerDetails.value =            retailerAssociationRequestDetailsList.value[index];      }      notifyListeners();      return responseData;      // throw "Done";    } on Exception catch (e) {      throw e;    }  }  void rejectRequest(dynamic data, String uniqueId) async {    int index = retailerAssociationRequestDetailsList.value.indexWhere(        (element) =>            element.data![0].companyInformation![0].uniqueId == uniqueId);    print(index);    int index2 = associationRequestData.value        .indexWhere((element) => element.associationUniqueId == uniqueId);    print(index2);    Response response = await _webService.postRequest(        data, NetworkUrls.updateRetailerWholesalerAssociationStatus);    final responseData =        UpdateResponseModel.fromJson(convert.jsonDecode(response.body));    if (responseData.success!) {      _navigationService.animatedDialog(          const AlertDialogMessage(AppString.rejectionCompleteSuccessful));      retailerAssociationRequestDetailsList          .value[index]          .data![0]          .companyInformation![0]          .status = describeEnum(StatusNames.rejected).toUpperCamelCase();      associationRequestData.value[index2].status =          describeEnum(StatusNames.rejected).toUpperCamelCase();      print(retailerAssociationRequestDetailsList          .value[index].data![0].companyInformation![0].status);      notifyListeners();    } else {      _navigationService.animatedDialog(          const AlertDialogMessage(AppString.rejectionCompleteUnsuccessful));    }  }}