import 'dart:convert';import 'package:bingo_wholesale/data_models/models/component_models/customer_type_model.dart';import 'package:bingo_wholesale/data_models/models/component_models/priceing_group_model.dart';import 'package:bingo_wholesale/data_models/models/component_models/sales_zone_model.dart';import 'package:bingo_wholesale/data_models/models/component_models/tax_id_type_model.dart';import 'package:bingo_wholesale/services/network/network_urls.dart';import 'package:bingo_wholesale/services/storage/db.dart';import 'package:bingo_wholesale/services/storage/deviceStorage.dart';import 'package:http/http.dart';import 'package:injectable/injectable.dart';import '../../../app/locator.dart';import 'package:stacked/stacked.dart';import '../data_models/models/component_models/grace_period_group.dart';import '../services/network/web_service.dart';@lazySingletonclass RepositoryComponents with ReactiveServiceMixin {  final WebService _webService = locator<WebService>();  final ZDeviceStorage _deviceStorage = locator<ZDeviceStorage>();  RepositoryComponents() {    listenToReactiveValues([]);  }  TaxIdType taxIdType = TaxIdType();  CustomerTypeModel customerType = CustomerTypeModel();  GracePeriodGroupModel gracePeriodGroup = GracePeriodGroupModel();  PricingGroupModel pricingGroup = PricingGroupModel();  SalesZoneModel salesZone = SalesZoneModel();  void getComponentsReady() {    getTaxIdType();    getCustomerType();    getGracePeriodGroup();    getPricingGroup();    getSalesZone();  }  void getTaxIdType() async {    var responseData = _deviceStorage.getString(DataBase.taxIdType);    if (responseData.isEmpty) {      try {        Response response = await _webService.getRequest(NetworkUrls.taxIdType);        _deviceStorage.setString(DataBase.taxIdType, response.body);        taxIdType = TaxIdType.fromJson(jsonDecode(response.body));      } catch (e) {}    } else {      taxIdType = TaxIdType.fromJson(jsonDecode(responseData));    }  }  void getCustomerType() async {    var responseData = _deviceStorage.getString(DataBase.customerType);    if (responseData.isEmpty) {      try {        Response response =            await _webService.getRequest(NetworkUrls.customerType);        print(response.body);        _deviceStorage.setString(DataBase.customerType, response.body);        customerType = CustomerTypeModel.fromJson(jsonDecode(response.body));        print(customerType.data![0].customerType);      } catch (e) {}    } else {      customerType = CustomerTypeModel.fromJson(jsonDecode(responseData));      print(responseData);      print(customerType.data![0].customerType);    }  }  void getGracePeriodGroup() async {    var responseData = _deviceStorage.getString(DataBase.gracePeriodGroup);    if (responseData.isEmpty) {      try {        Response response =            await _webService.getRequest(NetworkUrls.gracePeriodGroup);        _deviceStorage.setString(DataBase.gracePeriodGroup, response.body);        gracePeriodGroup =            GracePeriodGroupModel.fromJson(jsonDecode(response.body));      } catch (e) {}    } else {      gracePeriodGroup =          GracePeriodGroupModel.fromJson(jsonDecode(responseData));    }  }  void getPricingGroup() async {    var responseData = _deviceStorage.getString(DataBase.pricingGroup);    if (responseData.isEmpty) {      try {        Response response =            await _webService.getRequest(NetworkUrls.pricingGroup);        _deviceStorage.setString(DataBase.pricingGroup, response.body);        pricingGroup = PricingGroupModel.fromJson(jsonDecode(response.body));      } catch (e) {}    } else {      pricingGroup = PricingGroupModel.fromJson(jsonDecode(responseData));    }  }  void getSalesZone() async {    var responseData = _deviceStorage.getString(DataBase.salesZone);    if (responseData.isEmpty) {      try {        Response response = await _webService.getRequest(NetworkUrls.salesZone);        _deviceStorage.setString(DataBase.salesZone, response.body);        salesZone = SalesZoneModel.fromJson(jsonDecode(response.body));      } catch (e) {}    } else {      salesZone = SalesZoneModel.fromJson(jsonDecode(responseData));    }  }}